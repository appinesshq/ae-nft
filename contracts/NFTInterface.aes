@compiler >= 6

include "List.aes"
include "Option.aes"
include "String.aes"

contract interface NFT =
    /// Events.
    /// TransferEvent(_from, _to, _token_id)
    /// ApprovalEvent(_owner, _approved, _token_id)
    /// ApprovalForAllEvent(_owner, _operator, _approved)
    datatype event 
        = TransferEvent(indexed address, indexed address, indexed int)
        | ApprovalEvent(indexed address, indexed address, indexed int)
        | ApprovalForAllEvent(indexed address, indexed address, bool)

    /// mint issues a new token to the provided address
    /// @param _to is the address of the new token's owner
    /// @param _token_id is the id of the minted token
    /// @dev throws if already minted
    stateful entrypoint mint : (address, int) => unit

    /// safe_mint wraps around mint and offers a safe way to mint to contract recipients
    /// by checking whether the NFTReceiver interface is implemented on the receiving
    /// contract.
    /// @param _to is the address of the new token's owner
    /// @param _token_id is the id of the minted token
    /// @param _data is data that will be forwarded to contact recipients
    /// @dev throws if already minted
    /// @return true after completion
    stateful entrypoint safe_mint : (address, int, string) => bool

    /// balance_of provides all tokens assigned to an owner
    /// @param _owner is the address for whom to query the balance
    /// @return the number of tokens owned by `_owner` or 0 
    entrypoint balance_of : (address) => int

    /// owner_of provides the owner of an NFT
    /// @param _token_id The identifier for an NFT
    /// @return Some(address) or None
    entrypoint owner_of : (int) => option(address)
        
    /// safe_transfer_from_with_data transfers the ownership of an NFT from one address to another address
    /// @dev Throws unless `msg.sender` is the current owner, an authorized
    ///  operator, or the approved address for this NFT. Throws if `_from` is
    ///  not the current owner. Throws if `_to` is the zero address. Throws if
    ///  `_token_id` is not a valid NFT. When transfer is complete, this function
    ///  checks if `_to` is a smart contract. If so, it calls `onNFTReceived` on `_to`.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _token_id The token to transfer
    /// @param data Additional data with no specified format, sent in call to `_to`
    stateful entrypoint safe_transfer_from_with_data : (address, address, int, string) => bool

    /// safe_transfer_from transfers the ownership of an NFT from one address to another address
    /// works identically to safe_transfer_from_with_data with that difference that the data 
    /// parameter is set to an empty string
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _token_id The NFT to transfer
    stateful entrypoint safe_transfer_from : (address, address, int) => bool

    /// transfer_from transfers ownership of an NFT without any safety measures.
    /// @dev Throws unless caller is the current owner, an authorized
    ///  operator, or the approved address for this NFT. Throws if `_from` is
    ///  not the current owner. Throws if _token_id` is not a valid NFT.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _token_id The NFT to transfer
    stateful entrypoint transfer_from : (address, address, int) => unit

    /// approve sets or reaffirms the approved address for an NFT
    /// @dev The zero address indicates there is no approved address.
    /// @dev Throws unless caller  is the current NFT owner, or an authorized
    ///  operator of the current owner.
    /// @param _approved The new approved NFT controller
    /// @param _token_id The NFT to approve
    stateful entrypoint approve : (address, int) => unit

    stateful entrypoint revoke_approval : (int) => unit

    /// set_approval_for_all enables or disable approval for a manager (operator) to manage
    /// all of the caller's assets.
    /// @dev Emits the ApprovalForAll event. The contract allows
    ///  multiple operators per owner.
    /// @param _operator Address to add to the set of authorized operators.
    /// @param _approved True if the operator is approved, false to revoke approval
    stateful entrypoint set_approval_for_all : (address, bool) => unit

    /// get_approved provides the approved address for a token
    /// @dev Throws if `_token_id` is not a valid token
    /// @param _token_id The NFT to find the approved address for
    /// @return The approved address for this NFT, or None if none is set
    entrypoint get_approved : (int) => option(address)

    entrypoint is_approved : (int, address) => bool

    /// is_approved_for_all shows wether an address is an authorized operator for another address
    /// @param _owner The address that owns the NFTs
    /// @param _operator The address that acts on behalf of the owner
    /// @return True or false to indicate whether `_operator` is an approved operator or not
    entrypoint is_approved_for_all : (address, address) => bool

contract interface ControlledMinting =

    stateful entrypoint set_minter : (address) +> unit

    stateful entrypoint remove_minter : (address) => unit

    entrypoint is_minter : (address) => bool

contract interface Burnable = 
    /// burn will burn a token by setting the owner's address to the contract's address.
    /// @param _token_id is the id of the token
    stateful entrypoint burn : (int) => unit

contract interface WithTokenData = 
    /// get_token_data provides the token data for the requested token (if any)
    /// @param _token_id is the token id for which the uri is requested
    /// @return Some(list(type, value)) or None if no uri has been set for this token
    entrypoint get_token_data : (int) => option((string * string))

    /// mint_with_token_data issues a new token with metadata to the provided address
    /// @param _to is the address of the new token's owner
    /// @param _token_id is the id of the minted token
    /// @param _token_data_type is the type of data the value represents, e.g. uri, object_id
    /// @param _token_data_value is the data's value
    /// @dev throws if already minted
    stateful entrypoint mint_with_token_data : (address, int, string, string) => unit

    stateful entrypoint safe_mint_with_token_data : (address, int, string, string, string) => unit

contract interface WithMetaInfo = 
    record meta_info = 
    { name: string
    , symbol: string }

    // meta_info is a getter for meta info.
    entrypoint meta_info : () => meta_info

contract interface NFTReceiver = 
    entrypoint on_nft_received : (address, address, int, string) => unit